/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Gets all bank accounts associated with the specified reference
 * identifier.
 *
 * @param {string} referenceId The reference identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getBankAccountsByReferenceId(referenceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (referenceId === null || referenceId === undefined || typeof referenceId.valueOf() !== 'string') {
      throw new Error('referenceId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/bankaccounts';
  let queryParameters = [];
  queryParameters.push('referenceId=' + encodeURIComponent(referenceId));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'BankAccountModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'BankAccountModel'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Updates a bank account.
 *
 * @param {object} updateBankAccountModel The update bank account model.
 *
 * @param {string} [updateBankAccountModel.token] The payment token for the
 * bank account.
 *
 * @param {string} [updateBankAccountModel.nickname] The aribtrary nickname of
 * the account, used as a way to identify the account.
 *
 * @param {string} updateBankAccountModel.accountHolderName The name of the
 * individual or entity that is autorized to make transactions for the bank
 * account.
 *
 * @param {object} updateBankAccountModel.accountHolderAddress The mailing
 * address for the account holder.
 *
 * @param {string} updateBankAccountModel.accountHolderAddress.address1 The
 * first line of the street address.  Typcically contains
 * the number and street name.
 *
 * @param {string} [updateBankAccountModel.accountHolderAddress.address2] The
 * second line of the street address.  Typically contains
 * an apartment number, suite number or department.
 *
 * @param {string} updateBankAccountModel.accountHolderAddress.city The city
 * where the address is situated.
 *
 * @param {string} updateBankAccountModel.accountHolderAddress.state The state
 * where the address is located.
 *
 * @param {string} updateBankAccountModel.accountHolderAddress.zipCode The
 * postal code for the address.
 *
 * @param {string} updateBankAccountModel.email The email address for the
 * account holder.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateBankAccount(updateBankAccountModel, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (updateBankAccountModel === null || updateBankAccountModel === undefined) {
      throw new Error('updateBankAccountModel cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/bankaccounts';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (updateBankAccountModel !== null && updateBankAccountModel !== undefined) {
      let requestModelMapper = new client.models['UpdateBankAccountModel']().mapper();
      requestModel = client.serialize(requestModelMapper, updateBankAccountModel, 'updateBankAccountModel');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(updateBankAccountModel, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 204 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Object'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Posts a new bank account.
 *
 * @param {object} bankAccountRequest The bank account.
 *
 * @param {string} bankAccountRequest.accountNumber The bank account number.
 *
 * @param {string} bankAccountRequest.routingNumber The routing number of the
 * bank where the bank account was opened.
 *
 * @param {string} bankAccountRequest.accountHolderName The name of the
 * individual or entity that is autorized to make transactions for the bank
 * account.
 *
 * @param {object} bankAccountRequest.accountHolderAddress The mailing address
 * for the account holder.
 *
 * @param {string} bankAccountRequest.accountHolderAddress.address1 The first
 * line of the street address.  Typcically contains
 * the number and street name.
 *
 * @param {string} [bankAccountRequest.accountHolderAddress.address2] The
 * second line of the street address.  Typically contains
 * an apartment number, suite number or department.
 *
 * @param {string} bankAccountRequest.accountHolderAddress.city The city where
 * the address is situated.
 *
 * @param {string} bankAccountRequest.accountHolderAddress.state The state
 * where the address is located.
 *
 * @param {string} bankAccountRequest.accountHolderAddress.zipCode The postal
 * code for the address.
 *
 * @param {string} bankAccountRequest.type The bank account type. Possible
 * values include: 'Unknown', 'Checking', 'Savings'
 *
 * @param {string} [bankAccountRequest.referenceId] The client application
 * provided reference ID for the bank account.
 *
 * @param {string} [bankAccountRequest.nickname] The aribtrary nickname of the
 * account, used as a way to identify the account.
 *
 * @param {string} bankAccountRequest.email The email address for the account
 * holder.
 *
 * @param {string} [bankAccountRequest.redirectUrl] The url that the client
 * will be redirected to after the bank account has been created.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BankAccountResponseModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createBankAccount(bankAccountRequest, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (bankAccountRequest === null || bankAccountRequest === undefined) {
      throw new Error('bankAccountRequest cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/bankaccounts';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (bankAccountRequest !== null && bankAccountRequest !== undefined) {
      let requestModelMapper = new client.models['BankAccountRequestModel']().mapper();
      requestModel = client.serialize(requestModelMapper, bankAccountRequest, 'bankAccountRequest');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(bankAccountRequest, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BankAccountResponseModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets the bank account associated with the specified token.
 *
 * @param {string} token The token.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BankAccountModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getBankAccountByToken(token, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (token === null || token === undefined || typeof token.valueOf() !== 'string') {
      throw new Error('token cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/bankaccounts/{token}';
  requestUrl = requestUrl.replace('{token}', encodeURIComponent(token));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 403 && statusCode !== 404) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BankAccountModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets the bin information for a specified credit card number.
 *
 * @param {string} cardNumber The card number.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Bin} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getBin(cardNumber, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (cardNumber === null || cardNumber === undefined || typeof cardNumber.valueOf() !== 'string') {
      throw new Error('cardNumber cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/bins';
  let queryParameters = [];
  queryParameters.push('cardNumber=' + encodeURIComponent(cardNumber));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 404) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Bin']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets the checkout.
 *
 * @param {number} checkoutId The checkout identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CheckoutResponseModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCheckout(checkoutId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (checkoutId === null || checkoutId === undefined || typeof checkoutId !== 'number') {
      throw new Error('checkoutId cannot be null or undefined and it must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/checkouts';
  let queryParameters = [];
  queryParameters.push('checkoutId=' + encodeURIComponent(checkoutId.toString()));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 404) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CheckoutResponseModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Posts the specified model.
 *
 * @param {object} model The model.
 *
 * @param {string} [model.redirectUrl] Gets or sets the redirect URL.
 *
 * @param {string} [model.referenceId] Gets or sets the reference identifier.
 *
 * @param {number} [model.amount] Gets or sets the amount.
 *
 * @param {string} [model.nameOnAccount] Gets or sets the name on account.
 *
 * @param {date} [model.expirationDate] Gets or sets the expiration date.
 *
 * @param {boolean} [model.enableBillingInformation] Gets or sets a value
 * indicating whether [enable billing information].
 *
 * @param {object} [model.billingAddress] Gets or sets the billing address.
 *
 * @param {string} model.billingAddress.address1 The first line of the street
 * address.  Typcically contains
 * the number and street name.
 *
 * @param {string} [model.billingAddress.address2] The second line of the
 * street address.  Typically contains
 * an apartment number, suite number or department.
 *
 * @param {string} model.billingAddress.city The city where the address is
 * situated.
 *
 * @param {string} model.billingAddress.state The state where the address is
 * located.
 *
 * @param {string} model.billingAddress.zipCode The postal code for the
 * address.
 *
 * @param {string} [model.email] Gets or sets the email.
 *
 * @param {boolean} [model.requireEmail] Gets or sets a value indicating
 * whether [require email].
 *
 * @param {boolean} [model.enableSaveOption] Gets or sets a value indicating
 * whether [enable save option].
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CheckoutResponseModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createCheckout(model, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (model === null || model === undefined) {
      throw new Error('model cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/checkouts';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (model !== null && model !== undefined) {
      let requestModelMapper = new client.models['CheckoutRequestModel']().mapper();
      requestModel = client.serialize(requestModelMapper, model, 'model');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(model, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CheckoutResponseModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CheckoutResponseModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets all credit cards associated with the specified reference
 * identifier.
 *
 * @param {string} referenceId The reference identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCreditCardsByReferenceId(referenceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (referenceId === null || referenceId === undefined || typeof referenceId.valueOf() !== 'string') {
      throw new Error('referenceId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/creditcards';
  let queryParameters = [];
  queryParameters.push('referenceId=' + encodeURIComponent(referenceId));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CreditCardModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'CreditCardModel'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Updates a credit card.
 *
 * @param {object} updateCreditCardModel The update credit card model.
 *
 * @param {string} updateCreditCardModel.token The payment token for the credit
 * card.
 *
 * @param {number} updateCreditCardModel.expirationMonth The expiration month
 * of the credit card.
 *
 * @param {number} updateCreditCardModel.expirationYear The expiration year of
 * the credit card.
 *
 * @param {string} updateCreditCardModel.cardHolderName The name of the
 * cardholder, as it appears on the front of the credit card.
 *
 * @param {object} updateCreditCardModel.billingAddress The billing address for
 * the credit card holder..
 *
 * @param {string} updateCreditCardModel.billingAddress.address1 The first line
 * of the street address.  Typcically contains
 * the number and street name.
 *
 * @param {string} [updateCreditCardModel.billingAddress.address2] The second
 * line of the street address.  Typically contains
 * an apartment number, suite number or department.
 *
 * @param {string} updateCreditCardModel.billingAddress.city The city where the
 * address is situated.
 *
 * @param {string} updateCreditCardModel.billingAddress.state The state where
 * the address is located.
 *
 * @param {string} updateCreditCardModel.billingAddress.zipCode The postal code
 * for the address.
 *
 * @param {string} updateCreditCardModel.email A valid email address for the
 * card holder.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateCreditCard(updateCreditCardModel, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (updateCreditCardModel === null || updateCreditCardModel === undefined) {
      throw new Error('updateCreditCardModel cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/creditcards';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (updateCreditCardModel !== null && updateCreditCardModel !== undefined) {
      let requestModelMapper = new client.models['UpdateCreditCardModel']().mapper();
      requestModel = client.serialize(requestModelMapper, updateCreditCardModel, 'updateCreditCardModel');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(updateCreditCardModel, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 204 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Object'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Posts a new credit card.
 *
 * @param {object} creditCardRequest The new credit card.
 *
 * @param {string} creditCardRequest.cardNumber The number on the credit card.
 *
 * @param {string} creditCardRequest.securityCode The security, or CVV code, on
 * the card.
 *
 * @param {number} creditCardRequest.expirationMonth The expiration month of
 * the credit card.
 *
 * @param {number} creditCardRequest.expirationYear The expiration year of the
 * credit card.
 *
 * @param {string} creditCardRequest.cardHolderName The name of the cardholder,
 * as it appears on the front of the credit card.
 *
 * @param {object} creditCardRequest.billingAddress The billing address for the
 * credit card holder..
 *
 * @param {string} creditCardRequest.billingAddress.address1 The first line of
 * the street address.  Typcically contains
 * the number and street name.
 *
 * @param {string} [creditCardRequest.billingAddress.address2] The second line
 * of the street address.  Typically contains
 * an apartment number, suite number or department.
 *
 * @param {string} creditCardRequest.billingAddress.city The city where the
 * address is situated.
 *
 * @param {string} creditCardRequest.billingAddress.state The state where the
 * address is located.
 *
 * @param {string} creditCardRequest.billingAddress.zipCode The postal code for
 * the address.
 *
 * @param {string} creditCardRequest.email A valid email address for the card
 * holder.
 *
 * @param {string} [creditCardRequest.referenceId] The client application
 * provided reference ID for the credit card.
 *
 * @param {string} [creditCardRequest.redirectUrl] The url that the client will
 * be redirected to after the credit card has been created.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CreditCardResponseModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createCreditCard(creditCardRequest, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (creditCardRequest === null || creditCardRequest === undefined) {
      throw new Error('creditCardRequest cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/creditcards';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (creditCardRequest !== null && creditCardRequest !== undefined) {
      let requestModelMapper = new client.models['CreditCardRequestModel']().mapper();
      requestModel = client.serialize(requestModelMapper, creditCardRequest, 'creditCardRequest');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(creditCardRequest, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CreditCardResponseModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets the specified payment by its identifier.
 *
 * @param {number} id The payment identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaymentModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPayment(id, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (id === null || id === undefined || typeof id !== 'number') {
      throw new Error('id cannot be null or undefined and it must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/payments/{id}';
  requestUrl = requestUrl.replace('{id}', encodeURIComponent(id.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 404) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaymentModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets payments associated with the specified reference identifier.
 *
 * @param {string} referenceId The client application provided reference ID for
 * the payment.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {date} [options.minDate] The optional lower bound of the range for
 * payment date.
 *
 * @param {date} [options.maxDate] The optional upper bound of the range for
 * payment date.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPaymentsByReferenceId(referenceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let minDate = (options && options.minDate !== undefined) ? options.minDate : undefined;
  let maxDate = (options && options.maxDate !== undefined) ? options.maxDate : undefined;
  // Validate
  try {
    if (referenceId === null || referenceId === undefined || typeof referenceId.valueOf() !== 'string') {
      throw new Error('referenceId cannot be null or undefined and it must be of type string.');
    }
    if (minDate && !(minDate instanceof Date ||
        (typeof minDate.valueOf() === 'string' && !isNaN(Date.parse(minDate))))) {
          throw new Error('minDate must be of type date.');
        }
    if (maxDate && !(maxDate instanceof Date ||
        (typeof maxDate.valueOf() === 'string' && !isNaN(Date.parse(maxDate))))) {
          throw new Error('maxDate must be of type date.');
        }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/payments';
  let queryParameters = [];
  queryParameters.push('referenceId=' + encodeURIComponent(referenceId));
  if (minDate !== null && minDate !== undefined) {
    queryParameters.push('minDate=' + encodeURIComponent(client.serializeObject(minDate)));
  }
  if (maxDate !== null && maxDate !== undefined) {
    queryParameters.push('maxDate=' + encodeURIComponent(client.serializeObject(maxDate)));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PaymentModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'PaymentModel'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Posts a new payment.
 *
 * @param {object} paymentRequest The new payment.
 *
 * @param {number} [paymentRequest.paymentAmount] The payment amount.
 *
 * @param {string} [paymentRequest.description] The description of what will be
 * paid for.
 *
 * @param {string} [paymentRequest.referenceId] The client application provided
 * reference ID for the payment.
 *
 * @param {object} paymentRequest.paymentMethod The method of payment.
 *
 * @param {string} paymentRequest.paymentMethod.paymentToken The credit card or
 * bank account token that will be used for payment.
 *
 * @param {string} paymentRequest.paymentMethod.type The type of funding source
 * that will be used for the payment. Possible values include: 'Unknown',
 * 'Credit Card', 'ACH'
 *
 * @param {string} [paymentRequest.callbackUrl] The callback URL where payment
 * notifications will be sent.  Payment notifications are sent when the
 * state of a payment changes.  Notifications will be sent as an HTTP POST to
 * the URL provided and will
 * contain a PaymentId and optional ReferenceId, if one was provided when the
 * payment was created.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaymentModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createPayment(paymentRequest, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (paymentRequest === null || paymentRequest === undefined) {
      throw new Error('paymentRequest cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/payments';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (paymentRequest !== null && paymentRequest !== undefined) {
      let requestModelMapper = new client.models['PaymentRequestModel']().mapper();
      requestModel = client.serialize(requestModelMapper, paymentRequest, 'paymentRequest');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(paymentRequest, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaymentModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaymentModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets the refunds associated with the specified payment.
 *
 * @param {number} id The identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getRefunds(id, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (id === null || id === undefined || typeof id !== 'number') {
      throw new Error('id cannot be null or undefined and it must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/payments/{id}/refunds';
  requestUrl = requestUrl.replace('{id}', encodeURIComponent(id.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'RefundResultModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'RefundResultModel'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Posts a new refund request.
 *
 * @param {number} id The identifier of the payment to be refunded.
 *
 * @param {object} refundRequestModel The refund model.
 *
 * @param {number} [refundRequestModel.amount] The amount to be refunded.  If
 * an amount less than the original payment amount is
 * specified, a partial refund will be processed.  If no amount is specified, a
 * full refund
 * will be processed.
 *
 * @param {string} refundRequestModel.reason The reason for issuing the refund.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link RefundResultModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createRefund(id, refundRequestModel, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (id === null || id === undefined || typeof id !== 'number') {
      throw new Error('id cannot be null or undefined and it must be of type number.');
    }
    if (refundRequestModel === null || refundRequestModel === undefined) {
      throw new Error('refundRequestModel cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/payments/{id}/refunds';
  requestUrl = requestUrl.replace('{id}', encodeURIComponent(id.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (refundRequestModel !== null && refundRequestModel !== undefined) {
      let requestModelMapper = new client.models['RefundRequestModel']().mapper();
      requestModel = client.serialize(requestModelMapper, refundRequestModel, 'refundRequestModel');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(refundRequestModel, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 404) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RefundResultModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets all payment subscriptions associated with the specified
 * reference id.
 *
 * @param {string} referenceId The reference identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSubscriptionsByReferenceId(referenceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (referenceId === null || referenceId === undefined || typeof referenceId.valueOf() !== 'string') {
      throw new Error('referenceId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/subscriptions';
  let queryParameters = [];
  queryParameters.push('referenceId=' + encodeURIComponent(referenceId));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SubscriptionModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'SubscriptionModel'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Updates a payment subscription.
 *
 * @param {object} updateSubscriptionModel The update subscription model.
 *
 * @param {number} updateSubscriptionModel.id The id of the payment
 * subscription.
 *
 * @param {string} updateSubscriptionModel.name The name of payment
 * subscription.
 *
 * @param {string} [updateSubscriptionModel.description] The description of
 * payment subscription.
 *
 * @param {object} [updateSubscriptionModel.properties] The properties of the
 * payment subscription.
 *
 * @param {number} updateSubscriptionModel.runDay The process day of the
 * payment subscription.
 *
 * @param {string} updateSubscriptionModel.state The state that payment
 * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
 *
 * @param {string} updateSubscriptionModel.paymentType The payment type of the
 * payment subscription. Possible values include: 'Unknown', 'Credit Card',
 * 'ACH'
 *
 * @param {string} updateSubscriptionModel.paymentToken The payment token of
 * the payment subscription.
 *
 * @param {string} updateSubscriptionModel.amountType The amount type of the
 * payment subscription. Possible values include: 'Fixed', 'Dynamic'
 *
 * @param {number} [updateSubscriptionModel.amount] The amount of money to be
 * charged by the payment subscription.
 *
 * @param {string} [updateSubscriptionModel.amountWebServiceURL] The url of web
 * api to use to retrieve the amount to be charged by the payment subscription.
 *
 * @param {string} [updateSubscriptionModel.callbackWebServiceURL] The url of a
 * web api to use to post back notifications each time payment subscription is
 * processed.
 *
 * @param {date} [updateSubscriptionModel.endDate] The date indicating when the
 * payment subscription should be stopped.
 *
 * @param {string} [updateSubscriptionModel.referenceId] The client application
 * provided reference ID for the credit card.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateSubscription(updateSubscriptionModel, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (updateSubscriptionModel === null || updateSubscriptionModel === undefined) {
      throw new Error('updateSubscriptionModel cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/subscriptions';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (updateSubscriptionModel !== null && updateSubscriptionModel !== undefined) {
      let requestModelMapper = new client.models['UpdateSubscriptionModel']().mapper();
      requestModel = client.serialize(requestModelMapper, updateSubscriptionModel, 'updateSubscriptionModel');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(updateSubscriptionModel, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Object'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Posts a new payment subscription.
 *
 * @param {object} subscriptionRequest The subscription request.
 *
 * @param {string} subscriptionRequest.name The name of payment subscription.
 *
 * @param {string} [subscriptionRequest.description] The description of payment
 * subscription.
 *
 * @param {object} [subscriptionRequest.properties] The properties of the
 * payment subscription.
 *
 * @param {number} subscriptionRequest.runDay The process day of the payment
 * subscription.
 *
 * @param {string} subscriptionRequest.state The state that payment
 * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
 *
 * @param {string} subscriptionRequest.paymentType The payment type of the
 * payment subscription. Possible values include: 'Unknown', 'Credit Card',
 * 'ACH'
 *
 * @param {string} subscriptionRequest.paymentToken The payment token of the
 * payment subscription.
 *
 * @param {string} subscriptionRequest.amountType The amount type of the
 * payment subscription. Possible values include: 'Fixed', 'Dynamic'
 *
 * @param {number} [subscriptionRequest.amount] The amount of money to be
 * charged by the payment subscription.
 *
 * @param {string} [subscriptionRequest.amountWebServiceURL] The url of web api
 * to use to retrieve the amount to be charged by the payment subscription.
 *
 * @param {string} [subscriptionRequest.callbackWebServiceURL] The url of a web
 * api to use to post back notifications each time payment subscription is
 * processed.
 *
 * @param {date} [subscriptionRequest.endDate] The date indicating when the
 * payment subscription should be stopped.
 *
 * @param {string} [subscriptionRequest.referenceId] The client application
 * provided reference ID for the credit card.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SubscriptionResponceModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createSubscription(subscriptionRequest, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (subscriptionRequest === null || subscriptionRequest === undefined) {
      throw new Error('subscriptionRequest cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/subscriptions';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (subscriptionRequest !== null && subscriptionRequest !== undefined) {
      let requestModelMapper = new client.models['SubscriptionRequestModel']().mapper();
      requestModel = client.serialize(requestModelMapper, subscriptionRequest, 'subscriptionRequest');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(subscriptionRequest, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400 && statusCode !== 409) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SubscriptionResponceModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets a single payment subscription with the specified subscription
 * id.
 *
 * @param {string} id The subscription id.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SubscriptionModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSubscription(id, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (id === null || id === undefined || typeof id.valueOf() !== 'string') {
      throw new Error('id cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/subscriptions/{id}';
  requestUrl = requestUrl.replace('{id}', encodeURIComponent(id));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 404) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SubscriptionModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets the wallet by wallet ID
 *
 * @param {number} walletId The wallet identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WalletModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getWallet(walletId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (walletId === null || walletId === undefined || typeof walletId !== 'number') {
      throw new Error('walletId cannot be null or undefined and it must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/wallet/{walletId}';
  requestUrl = requestUrl.replace('{walletId}', encodeURIComponent(walletId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400 && statusCode !== 404) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WalletModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Puts the wallet.
 *
 * @param {number} walletId The wallet identifier.
 *
 * @param {string} defaultPaymentToken The default payment token.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateWallet(walletId, defaultPaymentToken, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (walletId === null || walletId === undefined || typeof walletId !== 'number') {
      throw new Error('walletId cannot be null or undefined and it must be of type number.');
    }
    if (defaultPaymentToken === null || defaultPaymentToken === undefined || typeof defaultPaymentToken.valueOf() !== 'string') {
      throw new Error('defaultPaymentToken cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/wallet/{walletId}';
  requestUrl = requestUrl.replace('{walletId}', encodeURIComponent(walletId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (defaultPaymentToken !== null && defaultPaymentToken !== undefined) {
      let requestModelMapper = {
        required: true,
        serializedName: 'defaultPaymentToken',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, defaultPaymentToken, 'defaultPaymentToken');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(defaultPaymentToken, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets the wallet by reference ID
 *
 * @param {string} referenceId The reference identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WalletModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getWalletByReferenceId(referenceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (referenceId === null || referenceId === undefined || typeof referenceId.valueOf() !== 'string') {
      throw new Error('referenceId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/wallet';
  let queryParameters = [];
  queryParameters.push('referenceId=' + encodeURIComponent(referenceId));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WalletModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a new empty wallet
 *
 * @param {object} model The model.
 *
 * @param {string} [model.referenceId] Gets or sets the reference identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createWallet(model, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (model === null || model === undefined) {
      throw new Error('model cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/wallet';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (model !== null && model !== undefined) {
      let requestModelMapper = new client.models['WalletRequestModel']().mapper();
      requestModel = client.serialize(requestModelMapper, model, 'model');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(model, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Adds a new credit card to the wallet
 *
 * @param {number} walletId The wallet identifier.
 *
 * @param {object} request The request.
 *
 * @param {string} [request.paymentToken] Gets or sets the payment token.
 *
 * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
 * this instance is default.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WalletModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _addWalletCreditCard(walletId, request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (walletId === null || walletId === undefined || typeof walletId !== 'number') {
      throw new Error('walletId cannot be null or undefined and it must be of type number.');
    }
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/wallet/{walletId}/CreditCard';
  requestUrl = requestUrl.replace('{walletId}', encodeURIComponent(walletId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['WalletCreditCardRequestModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WalletModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Adds a new bank account to the wallet
 *
 * @param {number} walletId The wallet identifier.
 *
 * @param {object} request The request.
 *
 * @param {string} [request.paymentToken] Gets or sets the payment token.
 *
 * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
 * this instance is default.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WalletModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _addWalletBankAccount(walletId, request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (walletId === null || walletId === undefined || typeof walletId !== 'number') {
      throw new Error('walletId cannot be null or undefined and it must be of type number.');
    }
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/wallet/{walletId}/BankAccount';
  requestUrl = requestUrl.replace('{walletId}', encodeURIComponent(walletId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['WalletBankAccountRequestModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WalletModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Deletes the wallet credit card.
 *
 * @param {number} walletId The wallet identifier.
 *
 * @param {number} walletCreditCardId The wallet credit card identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _removeWalletCreditCard(walletId, walletCreditCardId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (walletId === null || walletId === undefined || typeof walletId !== 'number') {
      throw new Error('walletId cannot be null or undefined and it must be of type number.');
    }
    if (walletCreditCardId === null || walletCreditCardId === undefined || typeof walletCreditCardId !== 'number') {
      throw new Error('walletCreditCardId cannot be null or undefined and it must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/wallet/{walletId}/CreditCard/{walletCreditCardId}';
  requestUrl = requestUrl.replace('{walletId}', encodeURIComponent(walletId.toString()));
  requestUrl = requestUrl.replace('{walletCreditCardId}', encodeURIComponent(walletCreditCardId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Deletes the wallet bank account.
 *
 * @param {number} walletId The wallet identifier.
 *
 * @param {number} walletBankAcctId The wallet bank acct identifier.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _removeWalletBankAccount(walletId, walletBankAcctId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (walletId === null || walletId === undefined || typeof walletId !== 'number') {
      throw new Error('walletId cannot be null or undefined and it must be of type number.');
    }
    if (walletBankAcctId === null || walletBankAcctId === undefined || typeof walletBankAcctId !== 'number') {
      throw new Error('walletBankAcctId cannot be null or undefined and it must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/wallet/{walletId}/BankAccount/{walletBankAcctId}';
  requestUrl = requestUrl.replace('{walletId}', encodeURIComponent(walletId.toString()));
  requestUrl = requestUrl.replace('{walletBankAcctId}', encodeURIComponent(walletBankAcctId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a SoftheonWalletAPI. */
class SoftheonWalletAPI extends ServiceClient {
  /**
   * Create a SoftheonWalletAPI.
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(credentials, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'https://hack.softheon.io/api/payments';
    }
    this.credentials = credentials;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.models = models;
    this._getBankAccountsByReferenceId = _getBankAccountsByReferenceId;
    this._updateBankAccount = _updateBankAccount;
    this._createBankAccount = _createBankAccount;
    this._getBankAccountByToken = _getBankAccountByToken;
    this._getBin = _getBin;
    this._getCheckout = _getCheckout;
    this._createCheckout = _createCheckout;
    this._getCreditCardsByReferenceId = _getCreditCardsByReferenceId;
    this._updateCreditCard = _updateCreditCard;
    this._createCreditCard = _createCreditCard;
    this._getPayment = _getPayment;
    this._getPaymentsByReferenceId = _getPaymentsByReferenceId;
    this._createPayment = _createPayment;
    this._getRefunds = _getRefunds;
    this._createRefund = _createRefund;
    this._getSubscriptionsByReferenceId = _getSubscriptionsByReferenceId;
    this._updateSubscription = _updateSubscription;
    this._createSubscription = _createSubscription;
    this._getSubscription = _getSubscription;
    this._getWallet = _getWallet;
    this._updateWallet = _updateWallet;
    this._getWalletByReferenceId = _getWalletByReferenceId;
    this._createWallet = _createWallet;
    this._addWalletCreditCard = _addWalletCreditCard;
    this._addWalletBankAccount = _addWalletBankAccount;
    this._removeWalletCreditCard = _removeWalletCreditCard;
    this._removeWalletBankAccount = _removeWalletBankAccount;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Gets all bank accounts associated with the specified reference
   * identifier.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getBankAccountsByReferenceIdWithHttpOperationResponse(referenceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getBankAccountsByReferenceId(referenceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets all bank accounts associated with the specified reference
   * identifier.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getBankAccountsByReferenceId(referenceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getBankAccountsByReferenceId(referenceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getBankAccountsByReferenceId(referenceId, options, optionalCallback);
    }
  }

  /**
   * @summary Updates a bank account.
   *
   * @param {object} updateBankAccountModel The update bank account model.
   *
   * @param {string} [updateBankAccountModel.token] The payment token for the
   * bank account.
   *
   * @param {string} [updateBankAccountModel.nickname] The aribtrary nickname of
   * the account, used as a way to identify the account.
   *
   * @param {string} updateBankAccountModel.accountHolderName The name of the
   * individual or entity that is autorized to make transactions for the bank
   * account.
   *
   * @param {object} updateBankAccountModel.accountHolderAddress The mailing
   * address for the account holder.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.address1 The
   * first line of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [updateBankAccountModel.accountHolderAddress.address2] The
   * second line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.city The city
   * where the address is situated.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.state The state
   * where the address is located.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.zipCode The
   * postal code for the address.
   *
   * @param {string} updateBankAccountModel.email The email address for the
   * account holder.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateBankAccountWithHttpOperationResponse(updateBankAccountModel, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateBankAccount(updateBankAccountModel, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Updates a bank account.
   *
   * @param {object} updateBankAccountModel The update bank account model.
   *
   * @param {string} [updateBankAccountModel.token] The payment token for the
   * bank account.
   *
   * @param {string} [updateBankAccountModel.nickname] The aribtrary nickname of
   * the account, used as a way to identify the account.
   *
   * @param {string} updateBankAccountModel.accountHolderName The name of the
   * individual or entity that is autorized to make transactions for the bank
   * account.
   *
   * @param {object} updateBankAccountModel.accountHolderAddress The mailing
   * address for the account holder.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.address1 The
   * first line of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [updateBankAccountModel.accountHolderAddress.address2] The
   * second line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.city The city
   * where the address is situated.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.state The state
   * where the address is located.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.zipCode The
   * postal code for the address.
   *
   * @param {string} updateBankAccountModel.email The email address for the
   * account holder.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateBankAccount(updateBankAccountModel, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateBankAccount(updateBankAccountModel, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateBankAccount(updateBankAccountModel, options, optionalCallback);
    }
  }

  /**
   * @summary Posts a new bank account.
   *
   * @param {object} bankAccountRequest The bank account.
   *
   * @param {string} bankAccountRequest.accountNumber The bank account number.
   *
   * @param {string} bankAccountRequest.routingNumber The routing number of the
   * bank where the bank account was opened.
   *
   * @param {string} bankAccountRequest.accountHolderName The name of the
   * individual or entity that is autorized to make transactions for the bank
   * account.
   *
   * @param {object} bankAccountRequest.accountHolderAddress The mailing address
   * for the account holder.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.address1 The first
   * line of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [bankAccountRequest.accountHolderAddress.address2] The
   * second line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.city The city where
   * the address is situated.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.state The state
   * where the address is located.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.zipCode The postal
   * code for the address.
   *
   * @param {string} bankAccountRequest.type The bank account type. Possible
   * values include: 'Unknown', 'Checking', 'Savings'
   *
   * @param {string} [bankAccountRequest.referenceId] The client application
   * provided reference ID for the bank account.
   *
   * @param {string} [bankAccountRequest.nickname] The aribtrary nickname of the
   * account, used as a way to identify the account.
   *
   * @param {string} bankAccountRequest.email The email address for the account
   * holder.
   *
   * @param {string} [bankAccountRequest.redirectUrl] The url that the client
   * will be redirected to after the bank account has been created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BankAccountResponseModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createBankAccountWithHttpOperationResponse(bankAccountRequest, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createBankAccount(bankAccountRequest, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Posts a new bank account.
   *
   * @param {object} bankAccountRequest The bank account.
   *
   * @param {string} bankAccountRequest.accountNumber The bank account number.
   *
   * @param {string} bankAccountRequest.routingNumber The routing number of the
   * bank where the bank account was opened.
   *
   * @param {string} bankAccountRequest.accountHolderName The name of the
   * individual or entity that is autorized to make transactions for the bank
   * account.
   *
   * @param {object} bankAccountRequest.accountHolderAddress The mailing address
   * for the account holder.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.address1 The first
   * line of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [bankAccountRequest.accountHolderAddress.address2] The
   * second line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.city The city where
   * the address is situated.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.state The state
   * where the address is located.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.zipCode The postal
   * code for the address.
   *
   * @param {string} bankAccountRequest.type The bank account type. Possible
   * values include: 'Unknown', 'Checking', 'Savings'
   *
   * @param {string} [bankAccountRequest.referenceId] The client application
   * provided reference ID for the bank account.
   *
   * @param {string} [bankAccountRequest.nickname] The aribtrary nickname of the
   * account, used as a way to identify the account.
   *
   * @param {string} bankAccountRequest.email The email address for the account
   * holder.
   *
   * @param {string} [bankAccountRequest.redirectUrl] The url that the client
   * will be redirected to after the bank account has been created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BankAccountResponseModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BankAccountResponseModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createBankAccount(bankAccountRequest, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createBankAccount(bankAccountRequest, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createBankAccount(bankAccountRequest, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the bank account associated with the specified token.
   *
   * @param {string} token The token.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BankAccountModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getBankAccountByTokenWithHttpOperationResponse(token, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getBankAccountByToken(token, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the bank account associated with the specified token.
   *
   * @param {string} token The token.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BankAccountModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BankAccountModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getBankAccountByToken(token, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getBankAccountByToken(token, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getBankAccountByToken(token, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the bin information for a specified credit card number.
   *
   * @param {string} cardNumber The card number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Bin>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getBinWithHttpOperationResponse(cardNumber, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getBin(cardNumber, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the bin information for a specified credit card number.
   *
   * @param {string} cardNumber The card number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Bin} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Bin} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getBin(cardNumber, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getBin(cardNumber, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getBin(cardNumber, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the checkout.
   *
   * @param {number} checkoutId The checkout identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CheckoutResponseModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCheckoutWithHttpOperationResponse(checkoutId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCheckout(checkoutId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the checkout.
   *
   * @param {number} checkoutId The checkout identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CheckoutResponseModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CheckoutResponseModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCheckout(checkoutId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCheckout(checkoutId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCheckout(checkoutId, options, optionalCallback);
    }
  }

  /**
   * @summary Posts the specified model.
   *
   * @param {object} model The model.
   *
   * @param {string} [model.redirectUrl] Gets or sets the redirect URL.
   *
   * @param {string} [model.referenceId] Gets or sets the reference identifier.
   *
   * @param {number} [model.amount] Gets or sets the amount.
   *
   * @param {string} [model.nameOnAccount] Gets or sets the name on account.
   *
   * @param {date} [model.expirationDate] Gets or sets the expiration date.
   *
   * @param {boolean} [model.enableBillingInformation] Gets or sets a value
   * indicating whether [enable billing information].
   *
   * @param {object} [model.billingAddress] Gets or sets the billing address.
   *
   * @param {string} model.billingAddress.address1 The first line of the street
   * address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [model.billingAddress.address2] The second line of the
   * street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} model.billingAddress.city The city where the address is
   * situated.
   *
   * @param {string} model.billingAddress.state The state where the address is
   * located.
   *
   * @param {string} model.billingAddress.zipCode The postal code for the
   * address.
   *
   * @param {string} [model.email] Gets or sets the email.
   *
   * @param {boolean} [model.requireEmail] Gets or sets a value indicating
   * whether [require email].
   *
   * @param {boolean} [model.enableSaveOption] Gets or sets a value indicating
   * whether [enable save option].
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CheckoutResponseModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createCheckoutWithHttpOperationResponse(model, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createCheckout(model, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Posts the specified model.
   *
   * @param {object} model The model.
   *
   * @param {string} [model.redirectUrl] Gets or sets the redirect URL.
   *
   * @param {string} [model.referenceId] Gets or sets the reference identifier.
   *
   * @param {number} [model.amount] Gets or sets the amount.
   *
   * @param {string} [model.nameOnAccount] Gets or sets the name on account.
   *
   * @param {date} [model.expirationDate] Gets or sets the expiration date.
   *
   * @param {boolean} [model.enableBillingInformation] Gets or sets a value
   * indicating whether [enable billing information].
   *
   * @param {object} [model.billingAddress] Gets or sets the billing address.
   *
   * @param {string} model.billingAddress.address1 The first line of the street
   * address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [model.billingAddress.address2] The second line of the
   * street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} model.billingAddress.city The city where the address is
   * situated.
   *
   * @param {string} model.billingAddress.state The state where the address is
   * located.
   *
   * @param {string} model.billingAddress.zipCode The postal code for the
   * address.
   *
   * @param {string} [model.email] Gets or sets the email.
   *
   * @param {boolean} [model.requireEmail] Gets or sets a value indicating
   * whether [require email].
   *
   * @param {boolean} [model.enableSaveOption] Gets or sets a value indicating
   * whether [enable save option].
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CheckoutResponseModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CheckoutResponseModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createCheckout(model, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createCheckout(model, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createCheckout(model, options, optionalCallback);
    }
  }

  /**
   * @summary Gets all credit cards associated with the specified reference
   * identifier.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCreditCardsByReferenceIdWithHttpOperationResponse(referenceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCreditCardsByReferenceId(referenceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets all credit cards associated with the specified reference
   * identifier.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCreditCardsByReferenceId(referenceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCreditCardsByReferenceId(referenceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCreditCardsByReferenceId(referenceId, options, optionalCallback);
    }
  }

  /**
   * @summary Updates a credit card.
   *
   * @param {object} updateCreditCardModel The update credit card model.
   *
   * @param {string} updateCreditCardModel.token The payment token for the credit
   * card.
   *
   * @param {number} updateCreditCardModel.expirationMonth The expiration month
   * of the credit card.
   *
   * @param {number} updateCreditCardModel.expirationYear The expiration year of
   * the credit card.
   *
   * @param {string} updateCreditCardModel.cardHolderName The name of the
   * cardholder, as it appears on the front of the credit card.
   *
   * @param {object} updateCreditCardModel.billingAddress The billing address for
   * the credit card holder..
   *
   * @param {string} updateCreditCardModel.billingAddress.address1 The first line
   * of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [updateCreditCardModel.billingAddress.address2] The second
   * line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} updateCreditCardModel.billingAddress.city The city where the
   * address is situated.
   *
   * @param {string} updateCreditCardModel.billingAddress.state The state where
   * the address is located.
   *
   * @param {string} updateCreditCardModel.billingAddress.zipCode The postal code
   * for the address.
   *
   * @param {string} updateCreditCardModel.email A valid email address for the
   * card holder.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateCreditCardWithHttpOperationResponse(updateCreditCardModel, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateCreditCard(updateCreditCardModel, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Updates a credit card.
   *
   * @param {object} updateCreditCardModel The update credit card model.
   *
   * @param {string} updateCreditCardModel.token The payment token for the credit
   * card.
   *
   * @param {number} updateCreditCardModel.expirationMonth The expiration month
   * of the credit card.
   *
   * @param {number} updateCreditCardModel.expirationYear The expiration year of
   * the credit card.
   *
   * @param {string} updateCreditCardModel.cardHolderName The name of the
   * cardholder, as it appears on the front of the credit card.
   *
   * @param {object} updateCreditCardModel.billingAddress The billing address for
   * the credit card holder..
   *
   * @param {string} updateCreditCardModel.billingAddress.address1 The first line
   * of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [updateCreditCardModel.billingAddress.address2] The second
   * line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} updateCreditCardModel.billingAddress.city The city where the
   * address is situated.
   *
   * @param {string} updateCreditCardModel.billingAddress.state The state where
   * the address is located.
   *
   * @param {string} updateCreditCardModel.billingAddress.zipCode The postal code
   * for the address.
   *
   * @param {string} updateCreditCardModel.email A valid email address for the
   * card holder.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateCreditCard(updateCreditCardModel, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateCreditCard(updateCreditCardModel, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateCreditCard(updateCreditCardModel, options, optionalCallback);
    }
  }

  /**
   * @summary Posts a new credit card.
   *
   * @param {object} creditCardRequest The new credit card.
   *
   * @param {string} creditCardRequest.cardNumber The number on the credit card.
   *
   * @param {string} creditCardRequest.securityCode The security, or CVV code, on
   * the card.
   *
   * @param {number} creditCardRequest.expirationMonth The expiration month of
   * the credit card.
   *
   * @param {number} creditCardRequest.expirationYear The expiration year of the
   * credit card.
   *
   * @param {string} creditCardRequest.cardHolderName The name of the cardholder,
   * as it appears on the front of the credit card.
   *
   * @param {object} creditCardRequest.billingAddress The billing address for the
   * credit card holder..
   *
   * @param {string} creditCardRequest.billingAddress.address1 The first line of
   * the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [creditCardRequest.billingAddress.address2] The second line
   * of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} creditCardRequest.billingAddress.city The city where the
   * address is situated.
   *
   * @param {string} creditCardRequest.billingAddress.state The state where the
   * address is located.
   *
   * @param {string} creditCardRequest.billingAddress.zipCode The postal code for
   * the address.
   *
   * @param {string} creditCardRequest.email A valid email address for the card
   * holder.
   *
   * @param {string} [creditCardRequest.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {string} [creditCardRequest.redirectUrl] The url that the client will
   * be redirected to after the credit card has been created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CreditCardResponseModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createCreditCardWithHttpOperationResponse(creditCardRequest, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createCreditCard(creditCardRequest, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Posts a new credit card.
   *
   * @param {object} creditCardRequest The new credit card.
   *
   * @param {string} creditCardRequest.cardNumber The number on the credit card.
   *
   * @param {string} creditCardRequest.securityCode The security, or CVV code, on
   * the card.
   *
   * @param {number} creditCardRequest.expirationMonth The expiration month of
   * the credit card.
   *
   * @param {number} creditCardRequest.expirationYear The expiration year of the
   * credit card.
   *
   * @param {string} creditCardRequest.cardHolderName The name of the cardholder,
   * as it appears on the front of the credit card.
   *
   * @param {object} creditCardRequest.billingAddress The billing address for the
   * credit card holder..
   *
   * @param {string} creditCardRequest.billingAddress.address1 The first line of
   * the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [creditCardRequest.billingAddress.address2] The second line
   * of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} creditCardRequest.billingAddress.city The city where the
   * address is situated.
   *
   * @param {string} creditCardRequest.billingAddress.state The state where the
   * address is located.
   *
   * @param {string} creditCardRequest.billingAddress.zipCode The postal code for
   * the address.
   *
   * @param {string} creditCardRequest.email A valid email address for the card
   * holder.
   *
   * @param {string} [creditCardRequest.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {string} [creditCardRequest.redirectUrl] The url that the client will
   * be redirected to after the credit card has been created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CreditCardResponseModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CreditCardResponseModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createCreditCard(creditCardRequest, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createCreditCard(creditCardRequest, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createCreditCard(creditCardRequest, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the specified payment by its identifier.
   *
   * @param {number} id The payment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPaymentWithHttpOperationResponse(id, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPayment(id, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the specified payment by its identifier.
   *
   * @param {number} id The payment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaymentModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPayment(id, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPayment(id, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPayment(id, options, optionalCallback);
    }
  }

  /**
   * @summary Gets payments associated with the specified reference identifier.
   *
   * @param {string} referenceId The client application provided reference ID for
   * the payment.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {date} [options.minDate] The optional lower bound of the range for
   * payment date.
   *
   * @param {date} [options.maxDate] The optional upper bound of the range for
   * payment date.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPaymentsByReferenceIdWithHttpOperationResponse(referenceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPaymentsByReferenceId(referenceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets payments associated with the specified reference identifier.
   *
   * @param {string} referenceId The client application provided reference ID for
   * the payment.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {date} [options.minDate] The optional lower bound of the range for
   * payment date.
   *
   * @param {date} [options.maxDate] The optional upper bound of the range for
   * payment date.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPaymentsByReferenceId(referenceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPaymentsByReferenceId(referenceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPaymentsByReferenceId(referenceId, options, optionalCallback);
    }
  }

  /**
   * @summary Posts a new payment.
   *
   * @param {object} paymentRequest The new payment.
   *
   * @param {number} [paymentRequest.paymentAmount] The payment amount.
   *
   * @param {string} [paymentRequest.description] The description of what will be
   * paid for.
   *
   * @param {string} [paymentRequest.referenceId] The client application provided
   * reference ID for the payment.
   *
   * @param {object} paymentRequest.paymentMethod The method of payment.
   *
   * @param {string} paymentRequest.paymentMethod.paymentToken The credit card or
   * bank account token that will be used for payment.
   *
   * @param {string} paymentRequest.paymentMethod.type The type of funding source
   * that will be used for the payment. Possible values include: 'Unknown',
   * 'Credit Card', 'ACH'
   *
   * @param {string} [paymentRequest.callbackUrl] The callback URL where payment
   * notifications will be sent.  Payment notifications are sent when the
   * state of a payment changes.  Notifications will be sent as an HTTP POST to
   * the URL provided and will
   * contain a PaymentId and optional ReferenceId, if one was provided when the
   * payment was created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createPaymentWithHttpOperationResponse(paymentRequest, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createPayment(paymentRequest, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Posts a new payment.
   *
   * @param {object} paymentRequest The new payment.
   *
   * @param {number} [paymentRequest.paymentAmount] The payment amount.
   *
   * @param {string} [paymentRequest.description] The description of what will be
   * paid for.
   *
   * @param {string} [paymentRequest.referenceId] The client application provided
   * reference ID for the payment.
   *
   * @param {object} paymentRequest.paymentMethod The method of payment.
   *
   * @param {string} paymentRequest.paymentMethod.paymentToken The credit card or
   * bank account token that will be used for payment.
   *
   * @param {string} paymentRequest.paymentMethod.type The type of funding source
   * that will be used for the payment. Possible values include: 'Unknown',
   * 'Credit Card', 'ACH'
   *
   * @param {string} [paymentRequest.callbackUrl] The callback URL where payment
   * notifications will be sent.  Payment notifications are sent when the
   * state of a payment changes.  Notifications will be sent as an HTTP POST to
   * the URL provided and will
   * contain a PaymentId and optional ReferenceId, if one was provided when the
   * payment was created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaymentModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createPayment(paymentRequest, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createPayment(paymentRequest, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createPayment(paymentRequest, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the refunds associated with the specified payment.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getRefundsWithHttpOperationResponse(id, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getRefunds(id, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the refunds associated with the specified payment.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getRefunds(id, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getRefunds(id, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getRefunds(id, options, optionalCallback);
    }
  }

  /**
   * @summary Posts a new refund request.
   *
   * @param {number} id The identifier of the payment to be refunded.
   *
   * @param {object} refundRequestModel The refund model.
   *
   * @param {number} [refundRequestModel.amount] The amount to be refunded.  If
   * an amount less than the original payment amount is
   * specified, a partial refund will be processed.  If no amount is specified, a
   * full refund
   * will be processed.
   *
   * @param {string} refundRequestModel.reason The reason for issuing the refund.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RefundResultModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createRefundWithHttpOperationResponse(id, refundRequestModel, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createRefund(id, refundRequestModel, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Posts a new refund request.
   *
   * @param {number} id The identifier of the payment to be refunded.
   *
   * @param {object} refundRequestModel The refund model.
   *
   * @param {number} [refundRequestModel.amount] The amount to be refunded.  If
   * an amount less than the original payment amount is
   * specified, a partial refund will be processed.  If no amount is specified, a
   * full refund
   * will be processed.
   *
   * @param {string} refundRequestModel.reason The reason for issuing the refund.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {RefundResultModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RefundResultModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createRefund(id, refundRequestModel, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createRefund(id, refundRequestModel, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createRefund(id, refundRequestModel, options, optionalCallback);
    }
  }

  /**
   * @summary Gets all payment subscriptions associated with the specified
   * reference id.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSubscriptionsByReferenceIdWithHttpOperationResponse(referenceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSubscriptionsByReferenceId(referenceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets all payment subscriptions associated with the specified
   * reference id.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSubscriptionsByReferenceId(referenceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSubscriptionsByReferenceId(referenceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSubscriptionsByReferenceId(referenceId, options, optionalCallback);
    }
  }

  /**
   * @summary Updates a payment subscription.
   *
   * @param {object} updateSubscriptionModel The update subscription model.
   *
   * @param {number} updateSubscriptionModel.id The id of the payment
   * subscription.
   *
   * @param {string} updateSubscriptionModel.name The name of payment
   * subscription.
   *
   * @param {string} [updateSubscriptionModel.description] The description of
   * payment subscription.
   *
   * @param {object} [updateSubscriptionModel.properties] The properties of the
   * payment subscription.
   *
   * @param {number} updateSubscriptionModel.runDay The process day of the
   * payment subscription.
   *
   * @param {string} updateSubscriptionModel.state The state that payment
   * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
   *
   * @param {string} updateSubscriptionModel.paymentType The payment type of the
   * payment subscription. Possible values include: 'Unknown', 'Credit Card',
   * 'ACH'
   *
   * @param {string} updateSubscriptionModel.paymentToken The payment token of
   * the payment subscription.
   *
   * @param {string} updateSubscriptionModel.amountType The amount type of the
   * payment subscription. Possible values include: 'Fixed', 'Dynamic'
   *
   * @param {number} [updateSubscriptionModel.amount] The amount of money to be
   * charged by the payment subscription.
   *
   * @param {string} [updateSubscriptionModel.amountWebServiceURL] The url of web
   * api to use to retrieve the amount to be charged by the payment subscription.
   *
   * @param {string} [updateSubscriptionModel.callbackWebServiceURL] The url of a
   * web api to use to post back notifications each time payment subscription is
   * processed.
   *
   * @param {date} [updateSubscriptionModel.endDate] The date indicating when the
   * payment subscription should be stopped.
   *
   * @param {string} [updateSubscriptionModel.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateSubscriptionWithHttpOperationResponse(updateSubscriptionModel, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateSubscription(updateSubscriptionModel, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Updates a payment subscription.
   *
   * @param {object} updateSubscriptionModel The update subscription model.
   *
   * @param {number} updateSubscriptionModel.id The id of the payment
   * subscription.
   *
   * @param {string} updateSubscriptionModel.name The name of payment
   * subscription.
   *
   * @param {string} [updateSubscriptionModel.description] The description of
   * payment subscription.
   *
   * @param {object} [updateSubscriptionModel.properties] The properties of the
   * payment subscription.
   *
   * @param {number} updateSubscriptionModel.runDay The process day of the
   * payment subscription.
   *
   * @param {string} updateSubscriptionModel.state The state that payment
   * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
   *
   * @param {string} updateSubscriptionModel.paymentType The payment type of the
   * payment subscription. Possible values include: 'Unknown', 'Credit Card',
   * 'ACH'
   *
   * @param {string} updateSubscriptionModel.paymentToken The payment token of
   * the payment subscription.
   *
   * @param {string} updateSubscriptionModel.amountType The amount type of the
   * payment subscription. Possible values include: 'Fixed', 'Dynamic'
   *
   * @param {number} [updateSubscriptionModel.amount] The amount of money to be
   * charged by the payment subscription.
   *
   * @param {string} [updateSubscriptionModel.amountWebServiceURL] The url of web
   * api to use to retrieve the amount to be charged by the payment subscription.
   *
   * @param {string} [updateSubscriptionModel.callbackWebServiceURL] The url of a
   * web api to use to post back notifications each time payment subscription is
   * processed.
   *
   * @param {date} [updateSubscriptionModel.endDate] The date indicating when the
   * payment subscription should be stopped.
   *
   * @param {string} [updateSubscriptionModel.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSubscription(updateSubscriptionModel, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateSubscription(updateSubscriptionModel, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateSubscription(updateSubscriptionModel, options, optionalCallback);
    }
  }

  /**
   * @summary Posts a new payment subscription.
   *
   * @param {object} subscriptionRequest The subscription request.
   *
   * @param {string} subscriptionRequest.name The name of payment subscription.
   *
   * @param {string} [subscriptionRequest.description] The description of payment
   * subscription.
   *
   * @param {object} [subscriptionRequest.properties] The properties of the
   * payment subscription.
   *
   * @param {number} subscriptionRequest.runDay The process day of the payment
   * subscription.
   *
   * @param {string} subscriptionRequest.state The state that payment
   * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
   *
   * @param {string} subscriptionRequest.paymentType The payment type of the
   * payment subscription. Possible values include: 'Unknown', 'Credit Card',
   * 'ACH'
   *
   * @param {string} subscriptionRequest.paymentToken The payment token of the
   * payment subscription.
   *
   * @param {string} subscriptionRequest.amountType The amount type of the
   * payment subscription. Possible values include: 'Fixed', 'Dynamic'
   *
   * @param {number} [subscriptionRequest.amount] The amount of money to be
   * charged by the payment subscription.
   *
   * @param {string} [subscriptionRequest.amountWebServiceURL] The url of web api
   * to use to retrieve the amount to be charged by the payment subscription.
   *
   * @param {string} [subscriptionRequest.callbackWebServiceURL] The url of a web
   * api to use to post back notifications each time payment subscription is
   * processed.
   *
   * @param {date} [subscriptionRequest.endDate] The date indicating when the
   * payment subscription should be stopped.
   *
   * @param {string} [subscriptionRequest.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SubscriptionResponceModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createSubscriptionWithHttpOperationResponse(subscriptionRequest, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createSubscription(subscriptionRequest, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Posts a new payment subscription.
   *
   * @param {object} subscriptionRequest The subscription request.
   *
   * @param {string} subscriptionRequest.name The name of payment subscription.
   *
   * @param {string} [subscriptionRequest.description] The description of payment
   * subscription.
   *
   * @param {object} [subscriptionRequest.properties] The properties of the
   * payment subscription.
   *
   * @param {number} subscriptionRequest.runDay The process day of the payment
   * subscription.
   *
   * @param {string} subscriptionRequest.state The state that payment
   * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
   *
   * @param {string} subscriptionRequest.paymentType The payment type of the
   * payment subscription. Possible values include: 'Unknown', 'Credit Card',
   * 'ACH'
   *
   * @param {string} subscriptionRequest.paymentToken The payment token of the
   * payment subscription.
   *
   * @param {string} subscriptionRequest.amountType The amount type of the
   * payment subscription. Possible values include: 'Fixed', 'Dynamic'
   *
   * @param {number} [subscriptionRequest.amount] The amount of money to be
   * charged by the payment subscription.
   *
   * @param {string} [subscriptionRequest.amountWebServiceURL] The url of web api
   * to use to retrieve the amount to be charged by the payment subscription.
   *
   * @param {string} [subscriptionRequest.callbackWebServiceURL] The url of a web
   * api to use to post back notifications each time payment subscription is
   * processed.
   *
   * @param {date} [subscriptionRequest.endDate] The date indicating when the
   * payment subscription should be stopped.
   *
   * @param {string} [subscriptionRequest.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SubscriptionResponceModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SubscriptionResponceModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createSubscription(subscriptionRequest, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createSubscription(subscriptionRequest, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createSubscription(subscriptionRequest, options, optionalCallback);
    }
  }

  /**
   * @summary Gets a single payment subscription with the specified subscription
   * id.
   *
   * @param {string} id The subscription id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SubscriptionModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSubscriptionWithHttpOperationResponse(id, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSubscription(id, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets a single payment subscription with the specified subscription
   * id.
   *
   * @param {string} id The subscription id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SubscriptionModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SubscriptionModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSubscription(id, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSubscription(id, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSubscription(id, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the wallet by wallet ID
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WalletModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWalletWithHttpOperationResponse(walletId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getWallet(walletId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the wallet by wallet ID
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WalletModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WalletModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getWallet(walletId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getWallet(walletId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getWallet(walletId, options, optionalCallback);
    }
  }

  /**
   * @summary Puts the wallet.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {string} defaultPaymentToken The default payment token.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWalletWithHttpOperationResponse(walletId, defaultPaymentToken, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateWallet(walletId, defaultPaymentToken, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Puts the wallet.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {string} defaultPaymentToken The default payment token.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateWallet(walletId, defaultPaymentToken, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateWallet(walletId, defaultPaymentToken, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateWallet(walletId, defaultPaymentToken, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the wallet by reference ID
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WalletModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWalletByReferenceIdWithHttpOperationResponse(referenceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getWalletByReferenceId(referenceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the wallet by reference ID
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WalletModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WalletModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getWalletByReferenceId(referenceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getWalletByReferenceId(referenceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getWalletByReferenceId(referenceId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a new empty wallet
   *
   * @param {object} model The model.
   *
   * @param {string} [model.referenceId] Gets or sets the reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWalletWithHttpOperationResponse(model, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createWallet(model, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a new empty wallet
   *
   * @param {object} model The model.
   *
   * @param {string} [model.referenceId] Gets or sets the reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createWallet(model, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createWallet(model, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createWallet(model, options, optionalCallback);
    }
  }

  /**
   * @summary Adds a new credit card to the wallet
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} request The request.
   *
   * @param {string} [request.paymentToken] Gets or sets the payment token.
   *
   * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
   * this instance is default.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WalletModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  addWalletCreditCardWithHttpOperationResponse(walletId, request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._addWalletCreditCard(walletId, request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Adds a new credit card to the wallet
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} request The request.
   *
   * @param {string} [request.paymentToken] Gets or sets the payment token.
   *
   * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
   * this instance is default.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WalletModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WalletModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  addWalletCreditCard(walletId, request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._addWalletCreditCard(walletId, request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._addWalletCreditCard(walletId, request, options, optionalCallback);
    }
  }

  /**
   * @summary Adds a new bank account to the wallet
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} request The request.
   *
   * @param {string} [request.paymentToken] Gets or sets the payment token.
   *
   * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
   * this instance is default.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WalletModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  addWalletBankAccountWithHttpOperationResponse(walletId, request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._addWalletBankAccount(walletId, request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Adds a new bank account to the wallet
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} request The request.
   *
   * @param {string} [request.paymentToken] Gets or sets the payment token.
   *
   * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
   * this instance is default.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WalletModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WalletModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  addWalletBankAccount(walletId, request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._addWalletBankAccount(walletId, request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._addWalletBankAccount(walletId, request, options, optionalCallback);
    }
  }

  /**
   * @summary Deletes the wallet credit card.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {number} walletCreditCardId The wallet credit card identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  removeWalletCreditCardWithHttpOperationResponse(walletId, walletCreditCardId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._removeWalletCreditCard(walletId, walletCreditCardId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Deletes the wallet credit card.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {number} walletCreditCardId The wallet credit card identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  removeWalletCreditCard(walletId, walletCreditCardId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._removeWalletCreditCard(walletId, walletCreditCardId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._removeWalletCreditCard(walletId, walletCreditCardId, options, optionalCallback);
    }
  }

  /**
   * @summary Deletes the wallet bank account.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {number} walletBankAcctId The wallet bank acct identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  removeWalletBankAccountWithHttpOperationResponse(walletId, walletBankAcctId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._removeWalletBankAccount(walletId, walletBankAcctId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Deletes the wallet bank account.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {number} walletBankAcctId The wallet bank acct identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  removeWalletBankAccount(walletId, walletBankAcctId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._removeWalletBankAccount(walletId, walletBankAcctId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._removeWalletBankAccount(walletId, walletBankAcctId, options, optionalCallback);
    }
  }

}

module.exports = SoftheonWalletAPI;
