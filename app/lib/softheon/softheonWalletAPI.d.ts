/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import * as models from "./models";

declare class SoftheonWalletAPI extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the SoftheonWalletAPI class.
   * @constructor
   *
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: ServiceClientCredentials, baseUri?: string, options?: ServiceClientOptions);

  credentials: ServiceClientCredentials;


  /**
   * @summary Gets all bank accounts associated with the specified reference
   * identifier.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getBankAccountsByReferenceIdWithHttpOperationResponse(referenceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BankAccountModel[]>>;

  /**
   * @summary Gets all bank accounts associated with the specified reference
   * identifier.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getBankAccountsByReferenceId(referenceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BankAccountModel[]>;
  getBankAccountsByReferenceId(referenceId: string, callback: ServiceCallback<models.BankAccountModel[]>): void;
  getBankAccountsByReferenceId(referenceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BankAccountModel[]>): void;


  /**
   * @summary Updates a bank account.
   *
   * @param {object} updateBankAccountModel The update bank account model.
   *
   * @param {string} [updateBankAccountModel.token] The payment token for the
   * bank account.
   *
   * @param {string} [updateBankAccountModel.nickname] The aribtrary nickname of
   * the account, used as a way to identify the account.
   *
   * @param {string} updateBankAccountModel.accountHolderName The name of the
   * individual or entity that is autorized to make transactions for the bank
   * account.
   *
   * @param {object} updateBankAccountModel.accountHolderAddress The mailing
   * address for the account holder.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.address1 The
   * first line of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [updateBankAccountModel.accountHolderAddress.address2] The
   * second line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.city The city
   * where the address is situated.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.state The state
   * where the address is located.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.zipCode The
   * postal code for the address.
   *
   * @param {string} updateBankAccountModel.email The email address for the
   * account holder.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateBankAccountWithHttpOperationResponse(updateBankAccountModel: models.UpdateBankAccountModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a bank account.
   *
   * @param {object} updateBankAccountModel The update bank account model.
   *
   * @param {string} [updateBankAccountModel.token] The payment token for the
   * bank account.
   *
   * @param {string} [updateBankAccountModel.nickname] The aribtrary nickname of
   * the account, used as a way to identify the account.
   *
   * @param {string} updateBankAccountModel.accountHolderName The name of the
   * individual or entity that is autorized to make transactions for the bank
   * account.
   *
   * @param {object} updateBankAccountModel.accountHolderAddress The mailing
   * address for the account holder.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.address1 The
   * first line of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [updateBankAccountModel.accountHolderAddress.address2] The
   * second line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.city The city
   * where the address is situated.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.state The state
   * where the address is located.
   *
   * @param {string} updateBankAccountModel.accountHolderAddress.zipCode The
   * postal code for the address.
   *
   * @param {string} updateBankAccountModel.email The email address for the
   * account holder.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateBankAccount(updateBankAccountModel: models.UpdateBankAccountModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateBankAccount(updateBankAccountModel: models.UpdateBankAccountModel, callback: ServiceCallback<any>): void;
  updateBankAccount(updateBankAccountModel: models.UpdateBankAccountModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Posts a new bank account.
   *
   * @param {object} bankAccountRequest The bank account.
   *
   * @param {string} bankAccountRequest.accountNumber The bank account number.
   *
   * @param {string} bankAccountRequest.routingNumber The routing number of the
   * bank where the bank account was opened.
   *
   * @param {string} bankAccountRequest.accountHolderName The name of the
   * individual or entity that is autorized to make transactions for the bank
   * account.
   *
   * @param {object} bankAccountRequest.accountHolderAddress The mailing address
   * for the account holder.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.address1 The first
   * line of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [bankAccountRequest.accountHolderAddress.address2] The
   * second line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.city The city where
   * the address is situated.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.state The state
   * where the address is located.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.zipCode The postal
   * code for the address.
   *
   * @param {string} bankAccountRequest.type The bank account type. Possible
   * values include: 'Unknown', 'Checking', 'Savings'
   *
   * @param {string} [bankAccountRequest.referenceId] The client application
   * provided reference ID for the bank account.
   *
   * @param {string} [bankAccountRequest.nickname] The aribtrary nickname of the
   * account, used as a way to identify the account.
   *
   * @param {string} bankAccountRequest.email The email address for the account
   * holder.
   *
   * @param {string} [bankAccountRequest.redirectUrl] The url that the client
   * will be redirected to after the bank account has been created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BankAccountResponseModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createBankAccountWithHttpOperationResponse(bankAccountRequest: models.BankAccountRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BankAccountResponseModel>>;

  /**
   * @summary Posts a new bank account.
   *
   * @param {object} bankAccountRequest The bank account.
   *
   * @param {string} bankAccountRequest.accountNumber The bank account number.
   *
   * @param {string} bankAccountRequest.routingNumber The routing number of the
   * bank where the bank account was opened.
   *
   * @param {string} bankAccountRequest.accountHolderName The name of the
   * individual or entity that is autorized to make transactions for the bank
   * account.
   *
   * @param {object} bankAccountRequest.accountHolderAddress The mailing address
   * for the account holder.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.address1 The first
   * line of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [bankAccountRequest.accountHolderAddress.address2] The
   * second line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.city The city where
   * the address is situated.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.state The state
   * where the address is located.
   *
   * @param {string} bankAccountRequest.accountHolderAddress.zipCode The postal
   * code for the address.
   *
   * @param {string} bankAccountRequest.type The bank account type. Possible
   * values include: 'Unknown', 'Checking', 'Savings'
   *
   * @param {string} [bankAccountRequest.referenceId] The client application
   * provided reference ID for the bank account.
   *
   * @param {string} [bankAccountRequest.nickname] The aribtrary nickname of the
   * account, used as a way to identify the account.
   *
   * @param {string} bankAccountRequest.email The email address for the account
   * holder.
   *
   * @param {string} [bankAccountRequest.redirectUrl] The url that the client
   * will be redirected to after the bank account has been created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BankAccountResponseModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BankAccountResponseModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BankAccountResponseModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createBankAccount(bankAccountRequest: models.BankAccountRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BankAccountResponseModel>;
  createBankAccount(bankAccountRequest: models.BankAccountRequestModel, callback: ServiceCallback<models.BankAccountResponseModel>): void;
  createBankAccount(bankAccountRequest: models.BankAccountRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BankAccountResponseModel>): void;


  /**
   * @summary Gets the bank account associated with the specified token.
   *
   * @param {string} token The token.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BankAccountModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getBankAccountByTokenWithHttpOperationResponse(token: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BankAccountModel>>;

  /**
   * @summary Gets the bank account associated with the specified token.
   *
   * @param {string} token The token.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BankAccountModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BankAccountModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BankAccountModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getBankAccountByToken(token: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BankAccountModel>;
  getBankAccountByToken(token: string, callback: ServiceCallback<models.BankAccountModel>): void;
  getBankAccountByToken(token: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BankAccountModel>): void;


  /**
   * @summary Gets the bin information for a specified credit card number.
   *
   * @param {string} cardNumber The card number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Bin>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getBinWithHttpOperationResponse(cardNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Bin>>;

  /**
   * @summary Gets the bin information for a specified credit card number.
   *
   * @param {string} cardNumber The card number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Bin} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Bin} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Bin} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getBin(cardNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Bin>;
  getBin(cardNumber: string, callback: ServiceCallback<models.Bin>): void;
  getBin(cardNumber: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Bin>): void;


  /**
   * @summary Gets the checkout.
   *
   * @param {number} checkoutId The checkout identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CheckoutResponseModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCheckoutWithHttpOperationResponse(checkoutId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckoutResponseModel>>;

  /**
   * @summary Gets the checkout.
   *
   * @param {number} checkoutId The checkout identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CheckoutResponseModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CheckoutResponseModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CheckoutResponseModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCheckout(checkoutId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckoutResponseModel>;
  getCheckout(checkoutId: number, callback: ServiceCallback<models.CheckoutResponseModel>): void;
  getCheckout(checkoutId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckoutResponseModel>): void;


  /**
   * @summary Posts the specified model.
   *
   * @param {object} model The model.
   *
   * @param {string} [model.redirectUrl] Gets or sets the redirect URL.
   *
   * @param {string} [model.referenceId] Gets or sets the reference identifier.
   *
   * @param {number} [model.amount] Gets or sets the amount.
   *
   * @param {string} [model.nameOnAccount] Gets or sets the name on account.
   *
   * @param {date} [model.expirationDate] Gets or sets the expiration date.
   *
   * @param {boolean} [model.enableBillingInformation] Gets or sets a value
   * indicating whether [enable billing information].
   *
   * @param {object} [model.billingAddress] Gets or sets the billing address.
   *
   * @param {string} model.billingAddress.address1 The first line of the street
   * address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [model.billingAddress.address2] The second line of the
   * street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} model.billingAddress.city The city where the address is
   * situated.
   *
   * @param {string} model.billingAddress.state The state where the address is
   * located.
   *
   * @param {string} model.billingAddress.zipCode The postal code for the
   * address.
   *
   * @param {string} [model.email] Gets or sets the email.
   *
   * @param {boolean} [model.requireEmail] Gets or sets a value indicating
   * whether [require email].
   *
   * @param {boolean} [model.enableSaveOption] Gets or sets a value indicating
   * whether [enable save option].
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CheckoutResponseModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createCheckoutWithHttpOperationResponse(model: models.CheckoutRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckoutResponseModel>>;

  /**
   * @summary Posts the specified model.
   *
   * @param {object} model The model.
   *
   * @param {string} [model.redirectUrl] Gets or sets the redirect URL.
   *
   * @param {string} [model.referenceId] Gets or sets the reference identifier.
   *
   * @param {number} [model.amount] Gets or sets the amount.
   *
   * @param {string} [model.nameOnAccount] Gets or sets the name on account.
   *
   * @param {date} [model.expirationDate] Gets or sets the expiration date.
   *
   * @param {boolean} [model.enableBillingInformation] Gets or sets a value
   * indicating whether [enable billing information].
   *
   * @param {object} [model.billingAddress] Gets or sets the billing address.
   *
   * @param {string} model.billingAddress.address1 The first line of the street
   * address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [model.billingAddress.address2] The second line of the
   * street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} model.billingAddress.city The city where the address is
   * situated.
   *
   * @param {string} model.billingAddress.state The state where the address is
   * located.
   *
   * @param {string} model.billingAddress.zipCode The postal code for the
   * address.
   *
   * @param {string} [model.email] Gets or sets the email.
   *
   * @param {boolean} [model.requireEmail] Gets or sets a value indicating
   * whether [require email].
   *
   * @param {boolean} [model.enableSaveOption] Gets or sets a value indicating
   * whether [enable save option].
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CheckoutResponseModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CheckoutResponseModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CheckoutResponseModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createCheckout(model: models.CheckoutRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckoutResponseModel>;
  createCheckout(model: models.CheckoutRequestModel, callback: ServiceCallback<models.CheckoutResponseModel>): void;
  createCheckout(model: models.CheckoutRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckoutResponseModel>): void;


  /**
   * @summary Gets all credit cards associated with the specified reference
   * identifier.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCreditCardsByReferenceIdWithHttpOperationResponse(referenceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreditCardModel[]>>;

  /**
   * @summary Gets all credit cards associated with the specified reference
   * identifier.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCreditCardsByReferenceId(referenceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreditCardModel[]>;
  getCreditCardsByReferenceId(referenceId: string, callback: ServiceCallback<models.CreditCardModel[]>): void;
  getCreditCardsByReferenceId(referenceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreditCardModel[]>): void;


  /**
   * @summary Updates a credit card.
   *
   * @param {object} updateCreditCardModel The update credit card model.
   *
   * @param {string} updateCreditCardModel.token The payment token for the credit
   * card.
   *
   * @param {number} updateCreditCardModel.expirationMonth The expiration month
   * of the credit card.
   *
   * @param {number} updateCreditCardModel.expirationYear The expiration year of
   * the credit card.
   *
   * @param {string} updateCreditCardModel.cardHolderName The name of the
   * cardholder, as it appears on the front of the credit card.
   *
   * @param {object} updateCreditCardModel.billingAddress The billing address for
   * the credit card holder..
   *
   * @param {string} updateCreditCardModel.billingAddress.address1 The first line
   * of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [updateCreditCardModel.billingAddress.address2] The second
   * line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} updateCreditCardModel.billingAddress.city The city where the
   * address is situated.
   *
   * @param {string} updateCreditCardModel.billingAddress.state The state where
   * the address is located.
   *
   * @param {string} updateCreditCardModel.billingAddress.zipCode The postal code
   * for the address.
   *
   * @param {string} updateCreditCardModel.email A valid email address for the
   * card holder.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateCreditCardWithHttpOperationResponse(updateCreditCardModel: models.UpdateCreditCardModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a credit card.
   *
   * @param {object} updateCreditCardModel The update credit card model.
   *
   * @param {string} updateCreditCardModel.token The payment token for the credit
   * card.
   *
   * @param {number} updateCreditCardModel.expirationMonth The expiration month
   * of the credit card.
   *
   * @param {number} updateCreditCardModel.expirationYear The expiration year of
   * the credit card.
   *
   * @param {string} updateCreditCardModel.cardHolderName The name of the
   * cardholder, as it appears on the front of the credit card.
   *
   * @param {object} updateCreditCardModel.billingAddress The billing address for
   * the credit card holder..
   *
   * @param {string} updateCreditCardModel.billingAddress.address1 The first line
   * of the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [updateCreditCardModel.billingAddress.address2] The second
   * line of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} updateCreditCardModel.billingAddress.city The city where the
   * address is situated.
   *
   * @param {string} updateCreditCardModel.billingAddress.state The state where
   * the address is located.
   *
   * @param {string} updateCreditCardModel.billingAddress.zipCode The postal code
   * for the address.
   *
   * @param {string} updateCreditCardModel.email A valid email address for the
   * card holder.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateCreditCard(updateCreditCardModel: models.UpdateCreditCardModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateCreditCard(updateCreditCardModel: models.UpdateCreditCardModel, callback: ServiceCallback<any>): void;
  updateCreditCard(updateCreditCardModel: models.UpdateCreditCardModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Posts a new credit card.
   *
   * @param {object} creditCardRequest The new credit card.
   *
   * @param {string} creditCardRequest.cardNumber The number on the credit card.
   *
   * @param {string} creditCardRequest.securityCode The security, or CVV code, on
   * the card.
   *
   * @param {number} creditCardRequest.expirationMonth The expiration month of
   * the credit card.
   *
   * @param {number} creditCardRequest.expirationYear The expiration year of the
   * credit card.
   *
   * @param {string} creditCardRequest.cardHolderName The name of the cardholder,
   * as it appears on the front of the credit card.
   *
   * @param {object} creditCardRequest.billingAddress The billing address for the
   * credit card holder..
   *
   * @param {string} creditCardRequest.billingAddress.address1 The first line of
   * the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [creditCardRequest.billingAddress.address2] The second line
   * of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} creditCardRequest.billingAddress.city The city where the
   * address is situated.
   *
   * @param {string} creditCardRequest.billingAddress.state The state where the
   * address is located.
   *
   * @param {string} creditCardRequest.billingAddress.zipCode The postal code for
   * the address.
   *
   * @param {string} creditCardRequest.email A valid email address for the card
   * holder.
   *
   * @param {string} [creditCardRequest.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {string} [creditCardRequest.redirectUrl] The url that the client will
   * be redirected to after the credit card has been created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CreditCardResponseModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createCreditCardWithHttpOperationResponse(creditCardRequest: models.CreditCardRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreditCardResponseModel>>;

  /**
   * @summary Posts a new credit card.
   *
   * @param {object} creditCardRequest The new credit card.
   *
   * @param {string} creditCardRequest.cardNumber The number on the credit card.
   *
   * @param {string} creditCardRequest.securityCode The security, or CVV code, on
   * the card.
   *
   * @param {number} creditCardRequest.expirationMonth The expiration month of
   * the credit card.
   *
   * @param {number} creditCardRequest.expirationYear The expiration year of the
   * credit card.
   *
   * @param {string} creditCardRequest.cardHolderName The name of the cardholder,
   * as it appears on the front of the credit card.
   *
   * @param {object} creditCardRequest.billingAddress The billing address for the
   * credit card holder..
   *
   * @param {string} creditCardRequest.billingAddress.address1 The first line of
   * the street address.  Typcically contains
   * the number and street name.
   *
   * @param {string} [creditCardRequest.billingAddress.address2] The second line
   * of the street address.  Typically contains
   * an apartment number, suite number or department.
   *
   * @param {string} creditCardRequest.billingAddress.city The city where the
   * address is situated.
   *
   * @param {string} creditCardRequest.billingAddress.state The state where the
   * address is located.
   *
   * @param {string} creditCardRequest.billingAddress.zipCode The postal code for
   * the address.
   *
   * @param {string} creditCardRequest.email A valid email address for the card
   * holder.
   *
   * @param {string} [creditCardRequest.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {string} [creditCardRequest.redirectUrl] The url that the client will
   * be redirected to after the credit card has been created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CreditCardResponseModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CreditCardResponseModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CreditCardResponseModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createCreditCard(creditCardRequest: models.CreditCardRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreditCardResponseModel>;
  createCreditCard(creditCardRequest: models.CreditCardRequestModel, callback: ServiceCallback<models.CreditCardResponseModel>): void;
  createCreditCard(creditCardRequest: models.CreditCardRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreditCardResponseModel>): void;


  /**
   * @summary Gets the specified payment by its identifier.
   *
   * @param {number} id The payment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getPaymentWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PaymentModel>>;

  /**
   * @summary Gets the specified payment by its identifier.
   *
   * @param {number} id The payment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {PaymentModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {PaymentModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getPayment(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PaymentModel>;
  getPayment(id: number, callback: ServiceCallback<models.PaymentModel>): void;
  getPayment(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PaymentModel>): void;


  /**
   * @summary Gets payments associated with the specified reference identifier.
   *
   * @param {string} referenceId The client application provided reference ID for
   * the payment.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {date} [options.minDate] The optional lower bound of the range for
   * payment date.
   *
   * @param {date} [options.maxDate] The optional upper bound of the range for
   * payment date.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getPaymentsByReferenceIdWithHttpOperationResponse(referenceId: string, options?: { minDate? : Date, maxDate? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PaymentModel[]>>;

  /**
   * @summary Gets payments associated with the specified reference identifier.
   *
   * @param {string} referenceId The client application provided reference ID for
   * the payment.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {date} [options.minDate] The optional lower bound of the range for
   * payment date.
   *
   * @param {date} [options.maxDate] The optional upper bound of the range for
   * payment date.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getPaymentsByReferenceId(referenceId: string, options?: { minDate? : Date, maxDate? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.PaymentModel[]>;
  getPaymentsByReferenceId(referenceId: string, callback: ServiceCallback<models.PaymentModel[]>): void;
  getPaymentsByReferenceId(referenceId: string, options: { minDate? : Date, maxDate? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PaymentModel[]>): void;


  /**
   * @summary Posts a new payment.
   *
   * @param {object} paymentRequest The new payment.
   *
   * @param {number} [paymentRequest.paymentAmount] The payment amount.
   *
   * @param {string} [paymentRequest.description] The description of what will be
   * paid for.
   *
   * @param {string} [paymentRequest.referenceId] The client application provided
   * reference ID for the payment.
   *
   * @param {object} paymentRequest.paymentMethod The method of payment.
   *
   * @param {string} paymentRequest.paymentMethod.paymentToken The credit card or
   * bank account token that will be used for payment.
   *
   * @param {string} paymentRequest.paymentMethod.type The type of funding source
   * that will be used for the payment. Possible values include: 'Unknown',
   * 'Credit Card', 'ACH'
   *
   * @param {string} [paymentRequest.callbackUrl] The callback URL where payment
   * notifications will be sent.  Payment notifications are sent when the
   * state of a payment changes.  Notifications will be sent as an HTTP POST to
   * the URL provided and will
   * contain a PaymentId and optional ReferenceId, if one was provided when the
   * payment was created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createPaymentWithHttpOperationResponse(paymentRequest: models.PaymentRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PaymentModel>>;

  /**
   * @summary Posts a new payment.
   *
   * @param {object} paymentRequest The new payment.
   *
   * @param {number} [paymentRequest.paymentAmount] The payment amount.
   *
   * @param {string} [paymentRequest.description] The description of what will be
   * paid for.
   *
   * @param {string} [paymentRequest.referenceId] The client application provided
   * reference ID for the payment.
   *
   * @param {object} paymentRequest.paymentMethod The method of payment.
   *
   * @param {string} paymentRequest.paymentMethod.paymentToken The credit card or
   * bank account token that will be used for payment.
   *
   * @param {string} paymentRequest.paymentMethod.type The type of funding source
   * that will be used for the payment. Possible values include: 'Unknown',
   * 'Credit Card', 'ACH'
   *
   * @param {string} [paymentRequest.callbackUrl] The callback URL where payment
   * notifications will be sent.  Payment notifications are sent when the
   * state of a payment changes.  Notifications will be sent as an HTTP POST to
   * the URL provided and will
   * contain a PaymentId and optional ReferenceId, if one was provided when the
   * payment was created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {PaymentModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {PaymentModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createPayment(paymentRequest: models.PaymentRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PaymentModel>;
  createPayment(paymentRequest: models.PaymentRequestModel, callback: ServiceCallback<models.PaymentModel>): void;
  createPayment(paymentRequest: models.PaymentRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PaymentModel>): void;


  /**
   * @summary Gets the refunds associated with the specified payment.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getRefundsWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RefundResultModel[]>>;

  /**
   * @summary Gets the refunds associated with the specified payment.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getRefunds(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RefundResultModel[]>;
  getRefunds(id: number, callback: ServiceCallback<models.RefundResultModel[]>): void;
  getRefunds(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RefundResultModel[]>): void;


  /**
   * @summary Posts a new refund request.
   *
   * @param {number} id The identifier of the payment to be refunded.
   *
   * @param {object} refundRequestModel The refund model.
   *
   * @param {number} [refundRequestModel.amount] The amount to be refunded.  If
   * an amount less than the original payment amount is
   * specified, a partial refund will be processed.  If no amount is specified, a
   * full refund
   * will be processed.
   *
   * @param {string} refundRequestModel.reason The reason for issuing the refund.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RefundResultModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createRefundWithHttpOperationResponse(id: number, refundRequestModel: models.RefundRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RefundResultModel>>;

  /**
   * @summary Posts a new refund request.
   *
   * @param {number} id The identifier of the payment to be refunded.
   *
   * @param {object} refundRequestModel The refund model.
   *
   * @param {number} [refundRequestModel.amount] The amount to be refunded.  If
   * an amount less than the original payment amount is
   * specified, a partial refund will be processed.  If no amount is specified, a
   * full refund
   * will be processed.
   *
   * @param {string} refundRequestModel.reason The reason for issuing the refund.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {RefundResultModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {RefundResultModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RefundResultModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createRefund(id: number, refundRequestModel: models.RefundRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RefundResultModel>;
  createRefund(id: number, refundRequestModel: models.RefundRequestModel, callback: ServiceCallback<models.RefundResultModel>): void;
  createRefund(id: number, refundRequestModel: models.RefundRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RefundResultModel>): void;


  /**
   * @summary Gets all payment subscriptions associated with the specified
   * reference id.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSubscriptionsByReferenceIdWithHttpOperationResponse(referenceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionModel[]>>;

  /**
   * @summary Gets all payment subscriptions associated with the specified
   * reference id.
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSubscriptionsByReferenceId(referenceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionModel[]>;
  getSubscriptionsByReferenceId(referenceId: string, callback: ServiceCallback<models.SubscriptionModel[]>): void;
  getSubscriptionsByReferenceId(referenceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionModel[]>): void;


  /**
   * @summary Updates a payment subscription.
   *
   * @param {object} updateSubscriptionModel The update subscription model.
   *
   * @param {number} updateSubscriptionModel.id The id of the payment
   * subscription.
   *
   * @param {string} updateSubscriptionModel.name The name of payment
   * subscription.
   *
   * @param {string} [updateSubscriptionModel.description] The description of
   * payment subscription.
   *
   * @param {object} [updateSubscriptionModel.properties] The properties of the
   * payment subscription.
   *
   * @param {number} updateSubscriptionModel.runDay The process day of the
   * payment subscription.
   *
   * @param {string} updateSubscriptionModel.state The state that payment
   * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
   *
   * @param {string} updateSubscriptionModel.paymentType The payment type of the
   * payment subscription. Possible values include: 'Unknown', 'Credit Card',
   * 'ACH'
   *
   * @param {string} updateSubscriptionModel.paymentToken The payment token of
   * the payment subscription.
   *
   * @param {string} updateSubscriptionModel.amountType The amount type of the
   * payment subscription. Possible values include: 'Fixed', 'Dynamic'
   *
   * @param {number} [updateSubscriptionModel.amount] The amount of money to be
   * charged by the payment subscription.
   *
   * @param {string} [updateSubscriptionModel.amountWebServiceURL] The url of web
   * api to use to retrieve the amount to be charged by the payment subscription.
   *
   * @param {string} [updateSubscriptionModel.callbackWebServiceURL] The url of a
   * web api to use to post back notifications each time payment subscription is
   * processed.
   *
   * @param {date} [updateSubscriptionModel.endDate] The date indicating when the
   * payment subscription should be stopped.
   *
   * @param {string} [updateSubscriptionModel.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateSubscriptionWithHttpOperationResponse(updateSubscriptionModel: models.UpdateSubscriptionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a payment subscription.
   *
   * @param {object} updateSubscriptionModel The update subscription model.
   *
   * @param {number} updateSubscriptionModel.id The id of the payment
   * subscription.
   *
   * @param {string} updateSubscriptionModel.name The name of payment
   * subscription.
   *
   * @param {string} [updateSubscriptionModel.description] The description of
   * payment subscription.
   *
   * @param {object} [updateSubscriptionModel.properties] The properties of the
   * payment subscription.
   *
   * @param {number} updateSubscriptionModel.runDay The process day of the
   * payment subscription.
   *
   * @param {string} updateSubscriptionModel.state The state that payment
   * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
   *
   * @param {string} updateSubscriptionModel.paymentType The payment type of the
   * payment subscription. Possible values include: 'Unknown', 'Credit Card',
   * 'ACH'
   *
   * @param {string} updateSubscriptionModel.paymentToken The payment token of
   * the payment subscription.
   *
   * @param {string} updateSubscriptionModel.amountType The amount type of the
   * payment subscription. Possible values include: 'Fixed', 'Dynamic'
   *
   * @param {number} [updateSubscriptionModel.amount] The amount of money to be
   * charged by the payment subscription.
   *
   * @param {string} [updateSubscriptionModel.amountWebServiceURL] The url of web
   * api to use to retrieve the amount to be charged by the payment subscription.
   *
   * @param {string} [updateSubscriptionModel.callbackWebServiceURL] The url of a
   * web api to use to post back notifications each time payment subscription is
   * processed.
   *
   * @param {date} [updateSubscriptionModel.endDate] The date indicating when the
   * payment subscription should be stopped.
   *
   * @param {string} [updateSubscriptionModel.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSubscription(updateSubscriptionModel: models.UpdateSubscriptionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateSubscription(updateSubscriptionModel: models.UpdateSubscriptionModel, callback: ServiceCallback<any>): void;
  updateSubscription(updateSubscriptionModel: models.UpdateSubscriptionModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Posts a new payment subscription.
   *
   * @param {object} subscriptionRequest The subscription request.
   *
   * @param {string} subscriptionRequest.name The name of payment subscription.
   *
   * @param {string} [subscriptionRequest.description] The description of payment
   * subscription.
   *
   * @param {object} [subscriptionRequest.properties] The properties of the
   * payment subscription.
   *
   * @param {number} subscriptionRequest.runDay The process day of the payment
   * subscription.
   *
   * @param {string} subscriptionRequest.state The state that payment
   * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
   *
   * @param {string} subscriptionRequest.paymentType The payment type of the
   * payment subscription. Possible values include: 'Unknown', 'Credit Card',
   * 'ACH'
   *
   * @param {string} subscriptionRequest.paymentToken The payment token of the
   * payment subscription.
   *
   * @param {string} subscriptionRequest.amountType The amount type of the
   * payment subscription. Possible values include: 'Fixed', 'Dynamic'
   *
   * @param {number} [subscriptionRequest.amount] The amount of money to be
   * charged by the payment subscription.
   *
   * @param {string} [subscriptionRequest.amountWebServiceURL] The url of web api
   * to use to retrieve the amount to be charged by the payment subscription.
   *
   * @param {string} [subscriptionRequest.callbackWebServiceURL] The url of a web
   * api to use to post back notifications each time payment subscription is
   * processed.
   *
   * @param {date} [subscriptionRequest.endDate] The date indicating when the
   * payment subscription should be stopped.
   *
   * @param {string} [subscriptionRequest.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SubscriptionResponceModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createSubscriptionWithHttpOperationResponse(subscriptionRequest: models.SubscriptionRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionResponceModel>>;

  /**
   * @summary Posts a new payment subscription.
   *
   * @param {object} subscriptionRequest The subscription request.
   *
   * @param {string} subscriptionRequest.name The name of payment subscription.
   *
   * @param {string} [subscriptionRequest.description] The description of payment
   * subscription.
   *
   * @param {object} [subscriptionRequest.properties] The properties of the
   * payment subscription.
   *
   * @param {number} subscriptionRequest.runDay The process day of the payment
   * subscription.
   *
   * @param {string} subscriptionRequest.state The state that payment
   * subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
   *
   * @param {string} subscriptionRequest.paymentType The payment type of the
   * payment subscription. Possible values include: 'Unknown', 'Credit Card',
   * 'ACH'
   *
   * @param {string} subscriptionRequest.paymentToken The payment token of the
   * payment subscription.
   *
   * @param {string} subscriptionRequest.amountType The amount type of the
   * payment subscription. Possible values include: 'Fixed', 'Dynamic'
   *
   * @param {number} [subscriptionRequest.amount] The amount of money to be
   * charged by the payment subscription.
   *
   * @param {string} [subscriptionRequest.amountWebServiceURL] The url of web api
   * to use to retrieve the amount to be charged by the payment subscription.
   *
   * @param {string} [subscriptionRequest.callbackWebServiceURL] The url of a web
   * api to use to post back notifications each time payment subscription is
   * processed.
   *
   * @param {date} [subscriptionRequest.endDate] The date indicating when the
   * payment subscription should be stopped.
   *
   * @param {string} [subscriptionRequest.referenceId] The client application
   * provided reference ID for the credit card.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SubscriptionResponceModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SubscriptionResponceModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SubscriptionResponceModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createSubscription(subscriptionRequest: models.SubscriptionRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionResponceModel>;
  createSubscription(subscriptionRequest: models.SubscriptionRequestModel, callback: ServiceCallback<models.SubscriptionResponceModel>): void;
  createSubscription(subscriptionRequest: models.SubscriptionRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionResponceModel>): void;


  /**
   * @summary Gets a single payment subscription with the specified subscription
   * id.
   *
   * @param {string} id The subscription id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SubscriptionModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSubscriptionWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionModel>>;

  /**
   * @summary Gets a single payment subscription with the specified subscription
   * id.
   *
   * @param {string} id The subscription id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SubscriptionModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SubscriptionModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SubscriptionModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSubscription(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionModel>;
  getSubscription(id: string, callback: ServiceCallback<models.SubscriptionModel>): void;
  getSubscription(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionModel>): void;


  /**
   * @summary Gets the wallet by wallet ID
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WalletModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getWalletWithHttpOperationResponse(walletId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WalletModel>>;

  /**
   * @summary Gets the wallet by wallet ID
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {WalletModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {WalletModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WalletModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getWallet(walletId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WalletModel>;
  getWallet(walletId: number, callback: ServiceCallback<models.WalletModel>): void;
  getWallet(walletId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WalletModel>): void;


  /**
   * @summary Puts the wallet.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {string} defaultPaymentToken The default payment token.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateWalletWithHttpOperationResponse(walletId: number, defaultPaymentToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Puts the wallet.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {string} defaultPaymentToken The default payment token.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateWallet(walletId: number, defaultPaymentToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateWallet(walletId: number, defaultPaymentToken: string, callback: ServiceCallback<void>): void;
  updateWallet(walletId: number, defaultPaymentToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Gets the wallet by reference ID
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WalletModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getWalletByReferenceIdWithHttpOperationResponse(referenceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WalletModel>>;

  /**
   * @summary Gets the wallet by reference ID
   *
   * @param {string} referenceId The reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {WalletModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {WalletModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WalletModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getWalletByReferenceId(referenceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WalletModel>;
  getWalletByReferenceId(referenceId: string, callback: ServiceCallback<models.WalletModel>): void;
  getWalletByReferenceId(referenceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WalletModel>): void;


  /**
   * @summary Creates a new empty wallet
   *
   * @param {object} model The model.
   *
   * @param {string} [model.referenceId] Gets or sets the reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createWalletWithHttpOperationResponse(model: models.WalletRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Creates a new empty wallet
   *
   * @param {object} model The model.
   *
   * @param {string} [model.referenceId] Gets or sets the reference identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createWallet(model: models.WalletRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  createWallet(model: models.WalletRequestModel, callback: ServiceCallback<void>): void;
  createWallet(model: models.WalletRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Adds a new credit card to the wallet
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} request The request.
   *
   * @param {string} [request.paymentToken] Gets or sets the payment token.
   *
   * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
   * this instance is default.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WalletModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  addWalletCreditCardWithHttpOperationResponse(walletId: number, request: models.WalletCreditCardRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WalletModel>>;

  /**
   * @summary Adds a new credit card to the wallet
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} request The request.
   *
   * @param {string} [request.paymentToken] Gets or sets the payment token.
   *
   * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
   * this instance is default.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {WalletModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {WalletModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WalletModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  addWalletCreditCard(walletId: number, request: models.WalletCreditCardRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WalletModel>;
  addWalletCreditCard(walletId: number, request: models.WalletCreditCardRequestModel, callback: ServiceCallback<models.WalletModel>): void;
  addWalletCreditCard(walletId: number, request: models.WalletCreditCardRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WalletModel>): void;


  /**
   * @summary Adds a new bank account to the wallet
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} request The request.
   *
   * @param {string} [request.paymentToken] Gets or sets the payment token.
   *
   * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
   * this instance is default.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WalletModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  addWalletBankAccountWithHttpOperationResponse(walletId: number, request: models.WalletBankAccountRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WalletModel>>;

  /**
   * @summary Adds a new bank account to the wallet
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {object} request The request.
   *
   * @param {string} [request.paymentToken] Gets or sets the payment token.
   *
   * @param {boolean} [request.isDefault] Gets or sets a value indicating whether
   * this instance is default.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {WalletModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {WalletModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WalletModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  addWalletBankAccount(walletId: number, request: models.WalletBankAccountRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WalletModel>;
  addWalletBankAccount(walletId: number, request: models.WalletBankAccountRequestModel, callback: ServiceCallback<models.WalletModel>): void;
  addWalletBankAccount(walletId: number, request: models.WalletBankAccountRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WalletModel>): void;


  /**
   * @summary Deletes the wallet credit card.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {number} walletCreditCardId The wallet credit card identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  removeWalletCreditCardWithHttpOperationResponse(walletId: number, walletCreditCardId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Deletes the wallet credit card.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {number} walletCreditCardId The wallet credit card identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  removeWalletCreditCard(walletId: number, walletCreditCardId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  removeWalletCreditCard(walletId: number, walletCreditCardId: number, callback: ServiceCallback<void>): void;
  removeWalletCreditCard(walletId: number, walletCreditCardId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Deletes the wallet bank account.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {number} walletBankAcctId The wallet bank acct identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  removeWalletBankAccountWithHttpOperationResponse(walletId: number, walletBankAcctId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Deletes the wallet bank account.
   *
   * @param {number} walletId The wallet identifier.
   *
   * @param {number} walletBankAcctId The wallet bank acct identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  removeWalletBankAccount(walletId: number, walletBankAcctId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  removeWalletBankAccount(walletId: number, walletBankAcctId: number, callback: ServiceCallback<void>): void;
  removeWalletBankAccount(walletId: number, walletBankAcctId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

export = SoftheonWalletAPI;
